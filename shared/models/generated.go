// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type AssetOwner string

const (
	AssetOwnerVendor   AssetOwner = "VENDOR"
	AssetOwnerUser     AssetOwner = "USER"
	AssetOwnerService  AssetOwner = "SERVICE"
	AssetOwnerCategory AssetOwner = "CATEGORY"
)

var AllAssetOwner = []AssetOwner{
	AssetOwnerVendor,
	AssetOwnerUser,
	AssetOwnerService,
	AssetOwnerCategory,
}

func (e AssetOwner) IsValid() bool {
	switch e {
	case AssetOwnerVendor, AssetOwnerUser, AssetOwnerService, AssetOwnerCategory:
		return true
	}
	return false
}

func (e AssetOwner) String() string {
	return string(e)
}

func (e *AssetOwner) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AssetOwner(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AssetOwner", str)
	}
	return nil
}

func (e AssetOwner) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

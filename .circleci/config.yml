version: 2 
jobs: 
  test:
    docker:
      - image: circleci/golang:1.11 #
        environment:
          GO111MODULE: "on"
          GO_ENV: "test"
          AWS_S3_BUCKET: lokblitz-stagin
          AUTHENTICATION_SECRET: saasdasasdsadasdasdsaasdsaddsadd
          PASSWORD_SECRET: asdadasddasas

      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: style
          POSTGRES_DB: style
          POSTGRES_PASSWORD: style
    working_directory: /go/src/github.com/synergydesigns/stylesblitz-server
    environment:
      TEST_RESULTS: /tmp/test-results
      ROOT_DIRECTORY: /go/src/github.com/synergydesigns/stylesblitz-server
      PG_DATABASE: style
      PG_USER: style
      PG_PASSWORD: style
      PG_HOST: localhost
      PG_PORT: 5432
      PG_SSL: disable
      MIGRATION_PATH: migrations/query
      APP_NAME: styleblitz
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}

      - run: go get github.com/jstemmer/go-junit-report
      - run: make migrate

      #  CircleCi's Go Docker image includes netcat
      #  This allows polling the DB port to confirm it is open before proceeding
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run:
          name: Run unit tests
          command: |
            trap "go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
            make test | tee ${TEST_RESULTS}/go-test.out

      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
  # build:
  #   docker: 
  #     - image: synergydesigns/styleblitz-go:latest
  #   working_directory: /go/src/github.com/synergydesigns/stylesblitz-server
  #   environment:
  #     TEST_RESULTS: /tmp/test-results
  #     MIGRATION_PATH: migrations/query
  #   steps:
  #     - checkout

  #     - run: curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
  #     - run: make build
  #     - run: make migrate
  #     - run: serverless config credentials --Vendor aws --key $AWS_ACCESS_KEY_ID --secret $AWS_SECRET_ACCESS_KEY
  #     - run: sls deploy

workflows:
  version: 2
  buid:
    jobs:
      - test
      # - build:
      #     requires:
      #       - test
          # filters:
          #   branches:
          #     only: master
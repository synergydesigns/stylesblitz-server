// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type ServiceInput struct {
	Name         string       `json:"name"`
	Duration     int          `json:"Duration"`
	DurationType DurationType `json:"DurationType"`
	Price        *float64     `json:"price"`
	Trending     *bool        `json:"trending"`
	VendorID     string       `json:"VendorId"`
	CategoryID   int          `json:"CategoryId"`
}

type ServiceInputUpdate struct {
	Name         *string       `json:"name"`
	Duration     *int          `json:"Duration"`
	DurationType *DurationType `json:"DurationType"`
	Price        *float64      `json:"price"`
	Trending     *bool         `json:"trending"`
	CategoryID   *int          `json:"CategoryId"`
}

type VendorCategoryInputUpdate struct {
	VendorID    string  `json:"vendor_id"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

type AssetOwner string

const (
	AssetOwnerVendor   AssetOwner = "VENDOR"
	AssetOwnerUser     AssetOwner = "USER"
	AssetOwnerService  AssetOwner = "SERVICE"
	AssetOwnerCategory AssetOwner = "CATEGORY"
)

var AllAssetOwner = []AssetOwner{
	AssetOwnerVendor,
	AssetOwnerUser,
	AssetOwnerService,
	AssetOwnerCategory,
}

func (e AssetOwner) IsValid() bool {
	switch e {
	case AssetOwnerVendor, AssetOwnerUser, AssetOwnerService, AssetOwnerCategory:
		return true
	}
	return false
}

func (e AssetOwner) String() string {
	return string(e)
}

func (e *AssetOwner) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AssetOwner(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AssetOwner", str)
	}
	return nil
}

func (e AssetOwner) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DurationType string

const (
	DurationTypeDays  DurationType = "days"
	DurationTypeHours DurationType = "hours"
	DurationTypeMins  DurationType = "mins"
)

var AllDurationType = []DurationType{
	DurationTypeDays,
	DurationTypeHours,
	DurationTypeMins,
}

func (e DurationType) IsValid() bool {
	switch e {
	case DurationTypeDays, DurationTypeHours, DurationTypeMins:
		return true
	}
	return false
}

func (e DurationType) String() string {
	return string(e)
}

func (e *DurationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DurationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DurationType", str)
	}
	return nil
}

func (e DurationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortPrice string

const (
	SortPriceHighest SortPrice = "HIGHEST"
	SortPriceLowest  SortPrice = "LOWEST"
)

var AllSortPrice = []SortPrice{
	SortPriceHighest,
	SortPriceLowest,
}

func (e SortPrice) IsValid() bool {
	switch e {
	case SortPriceHighest, SortPriceLowest:
		return true
	}
	return false
}

func (e SortPrice) String() string {
	return string(e)
}

func (e *SortPrice) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortPrice(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortPrice", str)
	}
	return nil
}

func (e SortPrice) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortRating string

const (
	SortRatingHighest SortRating = "HIGHEST"
	SortRatingLowest  SortRating = "LOWEST"
)

var AllSortRating = []SortRating{
	SortRatingHighest,
	SortRatingLowest,
}

func (e SortRating) IsValid() bool {
	switch e {
	case SortRatingHighest, SortRatingLowest:
		return true
	}
	return false
}

func (e SortRating) String() string {
	return string(e)
}

func (e *SortRating) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortRating(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortRating", str)
	}
	return nil
}

func (e SortRating) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
